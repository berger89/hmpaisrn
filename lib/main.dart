import 'package:flutter/material.dart';
import 'package:redux/redux.dart';                              // new
import 'package:hmpaisrn/models/app_state.dart';              // new
import 'package:hmpaisrn/reducers/app_reducer.dart';
import 'screens/home/index.dart';
import 'package:hmpaisrn/services/peopleinspace.dart';
import 'package:redux_thunk/redux_thunk.dart';
import 'package:flutter_redux/flutter_redux.dart';
import 'actions/fetch_actions.dart';
import 'models/app_state.dart';
import 'dart:io';
import 'package:redux_persist/redux_persist.dart';

void main() {
  final persistor = Persistor<AppState>(
    storage: FileStorage(File("state.json")), // Or use other engines
    serializer: JsonSerializer<AppState>(AppState.fromJson), // Or use other serializers
  );

  // Store is just a class that holds your apps State tree.
    // AppState is something that we will (but haven't yet) established
  final store = new Store<AppState>(                            // new
    appReducer,                                                 // new
    initialState: new AppState(),                               // new
    middleware: [thunkMiddleware, persistor.createMiddleware()],                                             // new
  );

  store.dispatch(fetchNextLaunchesAction);

  runApp(new MainApp(store: store, title: 'Test',));
} 

class MainApp extends StatelessWidget {
  final Store store;
  final String title;

  MainApp({ this.store, this.title });

  @override
  Widget build(BuildContext context) {
    return new StoreProvider<AppState>(store: store, child: new Home(title: title, autogenerated: fetchPost()));
  }
}
