import 'package:redux/redux.dart';
import 'package:hmpaisrn/services/launchlib.dart';
import 'package:hmpaisrn/services/peopleinspace.dart';
import 'package:hmpaisrn/models/app_state.dart';
import 'package:hmpaisrn/data/launch.dart';
import 'package:hmpaisrn/data/autogenerated.dart';
import 'package:redux_thunk/redux_thunk.dart';

class FetchSetLoadingAction {
  final bool loading;

  FetchSetLoadingAction({ this.loading });
}

class FetchSetUpcomingLaunchesAction {
  final Launch upcomingLaunch;

  FetchSetUpcomingLaunchesAction({ this.upcomingLaunch });
}

class FetchSetPreviousLaunchAction {
  final Launch previousLaunch;

  FetchSetPreviousLaunchAction({ this.previousLaunch });
}

class FetchSetSearchLaunchAction {
  final Launch searchLaunch;

  FetchSetSearchLaunchAction({ this.searchLaunch });
}

class FetchSetPeopleInSpaceAction {
  final Autogenerated autogenerated;

  FetchSetPeopleInSpaceAction({ this.autogenerated });
}

void fetchPeopleInSpaceAction(Store<AppState> store) async {
  store.dispatch(new FetchSetLoadingAction(loading: true));

  final peopleInSpace = await fetchPeopleInSpace();

  store.dispatch(new FetchSetLoadingAction(loading: false));

  store.dispatch(new FetchSetPeopleInSpaceAction(autogenerated: peopleInSpace));
}

void fetchUpcomingLaunchesAction(Store<AppState> store) async {
  store.dispatch(new FetchSetLoadingAction(loading: true));

  final fetchedLaunch = await fetchUpcomingLaunches();

  store.dispatch(new FetchSetLoadingAction(loading: false));

  store.dispatch(new FetchSetUpcomingLaunchesAction(upcomingLaunch: fetchedLaunch));
}

ThunkAction<AppState> fetchPreviousLaunchesAction(DateTime startdate, DateTime enddate) {
  return (Store<AppState> store) async {
    store.dispatch(new FetchSetLoadingAction(loading: true));

    final fetchedLaunch = await fetchPreviousLaunches(startdate: startdate, enddate: enddate);
    
    store.dispatch(new FetchSetLoadingAction(loading: false));

    store.dispatch(new FetchSetPreviousLaunchAction(previousLaunch: fetchedLaunch));
  };
}

ThunkAction<AppState> fetchSearchLaunchesAction(int limit, String searchText) {
  return (Store<AppState> store) async {
    store.dispatch(new FetchSetLoadingAction(loading: true));

    final fetchedLaunch = await fetchSearchLaunches(limit: limit, name: searchText);
    
    store.dispatch(new FetchSetLoadingAction(loading: false));

    store.dispatch(new FetchSetSearchLaunchAction(searchLaunch: fetchedLaunch));
  };
}
